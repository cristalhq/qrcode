package qrcode

import (
	"bytes"
	"fmt"
)

func (c *Code) SVG() []byte {
	var w svgWriter
	return w.encode(c)
}

type svgWriter struct {
	bytes.Buffer
}

func (wr *svgWriter) encode(code *Code) []byte {
	size := code.Size

	wr.Reset()
	wr.start()

	blockSize := 10
	currY := 0
	for x := 0; x < size; x++ {
		currX := 0
		for y := 0; y < size; y++ {
			if code.IsBlack(x, y) {
				wr.writeRect(currX, currY, blockSize, blockSize)
			}
			currX += blockSize
		}
		currY += blockSize
	}

	wr.end()
	return wr.Bytes()
}

func (wr *svgWriter) start() {
	wr.WriteString(svgHeader)
	fmt.Fprintf(&wr.Buffer, svgStart, 220, 220) // TODO(cristaloleg): magic but works.
}

func (wr *svgWriter) end() {
	wr.WriteString(svgEnd)
}

func (wr *svgWriter) writeRect(x, y, w, h int) {
	wr.WriteString("<rect ")
	wr.WriteString(dims(x, y, w, h))
	wr.WriteString(` style="fill:black;stroke:none" />`)
	wr.WriteByte('\n')
}

func dims(x int, y int, w int, h int) string {
	return fmt.Sprintf(`x="%d" y="%d" width="%d" height="%d"`, x, y, w, h)
}

const (
	svgHeader = `<?xml version="1.0"?><!-- Generated by cristalhq -->
`

	svgStart = `<svg width="%d" height="%d"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink">
`

	svgEnd = `</svg>`
)
